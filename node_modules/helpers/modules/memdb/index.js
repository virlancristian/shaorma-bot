const fs = require('fs');
const path = require('path');
const { hash } = require('./hash.js');
let cachedb = {};

function write(filename, data) {
    const jsonString = JSON.stringify(data, null, 2);
    try {
        const resolveFilePath = path.resolve(__dirname, `store/${filename}.json`);
        fs.writeFileSync(resolveFilePath, jsonString);
        cachedb[filename] = data;
    } catch (error) {
        console.error('Error commiting JSON to File:', error);
    }
}

function read(filename) {
    const resolveFilePath = path.resolve(__dirname, `store/${filename}.json`);
    if (fs.existsSync(resolveFilePath)) {
        try {
            const jsonString = fs.readFileSync(resolveFilePath, 'utf8');
            cachedb[filename] = JSON.parse(jsonString);

            return cachedb[filename];
        } catch (error) {
            console.error('Error parsing memdb from File:', error);
        }
    } else {
        write(filename, {});
    }
}

function findInHMap(input, storageName) {
    const index = hash(input);

    if(!cachedb[storageName][index]) {
        throw new Error('Object is not found.');
    }

    return cachedb[storageName][index];  
}

function addInHMap(input, storageName, data) {
    const index = hash(input);

    if(cachedb[storageName] == null) {
        cachedb[storageName] = {};
    }

    if(cachedb[storageName][index] == null) {
        cachedb[storageName][index] = [];
    }

    for(const objects of cachedb[storageName][index]) {
        if(objects == data) { 
            throw new Error('Object is already in the hashmap.');
        }
    }

    cachedb[storageName][index].push(data);
}

module.exports = {
    memdb: {
        write: write,
        read: read,
        cache: cachedb,
        map: {
            check: findInHMap,
            add: addInHMap
        }
    }
};