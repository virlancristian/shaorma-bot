const fs = require('fs');
const path = require('path');
const { hashString } = require('helpers/modules/hashing');
let cachedb = {};
let mapdb = {};

function write(filename, data) {
    const jsonString = JSON.stringify(data, null, 2);
    try {
        const resolveFilePath = path.resolve(__dirname, `store/${filename}.json`);
        fs.writeFileSync(resolveFilePath, jsonString);
        cachedb[filename] = data;
    } catch (error) {
        console.error('Error commiting JSON to File:', error);
    }
}

function read(filename) {
    const resolveFilePath = path.resolve(__dirname, `store/${filename}.json`);
    if (fs.existsSync(resolveFilePath)) {
        try {
            const jsonString = fs.readFileSync(resolveFilePath, 'utf8');
            cachedb[filename] = JSON.parse(jsonString);

            return cachedb[filename];
        } catch (error) {
            console.error('Error parsing memdb from File:', error);
        }
    } else {
        write(filename, {});
    }
}

function findInHMap(hashProperty, storageName) {
    const hashKey = hashString(hashProperty);

    return mapdb[storageName][hashKey] >= 0 ? mapdb[storageName][hashKey] : false;
}

function createHMap(hashProperty, storageName) {
    if(!mapdb[storageName]) mapdb[storageName] = {};

    for(let index = 0; index < cachedb[storageName].length; index++) {
        const hashKey = hashString(cachedb[storageName][index][hashProperty]);

        mapdb[storageName][hashKey] ??= index;
        if (mapdb[storageName][hashKey] !== index) mapdb[storageName][hashKey] = index;
    }
}

module.exports = {
    memdb: {
        write: write,
        read: read,
        cache: cachedb,
        map: mapdb,
        hash: {
            find: findInHMap,
            map: createHMap
        }
    }
};