const { memdb } = require('helpers/modules/memdb');
const { userId, csvArguments } = require('helpers/modules/disambiguate');

function sanitizeInputs(user, commands, guild) {
    let sanitizedArgs = {};
    
    sanitizedArgs.userId = userId(user, guild);
    sanitizedArgs.commands = csvArguments(commands);

    return sanitizedArgs;
}

async function addToExclusionList(obj, interaction) {
    if (obj.userId) {
        if (obj.commands.length < 1) {
            await interaction.reply({ content: `No valid commands were provided: "${interaction.options.getString('commands')}"`, ephemeral: true});
        } else {
            if (memdb.cache['blacklist'][obj.userId]) {
                memdb.cache['blacklist'][obj.userId]["banned-commands"] = [
                    ...new Set([
                        ...memdb.cache['blacklist'][obj.userId]["banned-commands"],
                        ...obj.commands
                    ])
                ];
            } else {
                memdb.cache['blacklist'][obj.userId] = {"banned-commands": obj.commands};
            }

            memdb.write('blacklist', memdb.cache['blacklist']);
            await interaction.reply({ content: `Command exclusion successfully added to user: ${interaction.options.getString('user')}`, ephemeral: true});
        }
    } else {
        await interaction.reply({ content: `User ID: "${interaction.options.getString('user')}" was not found in current guild context.`, ephemeral: true});
    }
}

module.exports = { sanitizeInputs, addToExclusionList }